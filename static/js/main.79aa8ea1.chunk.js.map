{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","email","password","confirmPassword","name","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,kKCmN5BC,MA5Mf,WAAgB,IAAD,EACWC,mBAAS,CAC/BC,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBC,KAAM,KALK,mBAsIb,OAtIa,UAuIX,yBAAKC,UAAU,OACb,8CCnIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79aa8ea1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { GoogleLogin } from \"react-google-login\";\nimport FacebookLogin from \"react-facebook-login\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log(form);\n\n    try {\n      const newUser = await axios.post(\n        // \"https://warm-reef-14893.herokuapp.com/api/v1/auth/register\",\n        \"http://localhost:4242/auth/register\",\n        form\n      );\n\n      console.log(newUser.data);\n    } catch (error) {\n      console.error(error);\n    }\n\n    setForm({ email: \"\", password: \"\", confirmPassword: \"\", name: \"\" });\n  };\n\n  const handleInput = (e) => {\n    const { value, name } = e.target;\n\n    setForm({ ...form, [name]: value });\n  };\n\n  const responseGoogle = async (response) => {\n    console.log(response);\n\n    const { accessToken } = response;\n\n    const body = {\n      accessToken,\n    };\n\n    const bla = await axios.post(\n      // \"https://warm-reef-14893.herokuapp.com/api/v1/auth/google\",\n      // \"http://localhost:4242/api/v1/auth/google\",\n      \"http://localhost:4242/auth/google\",\n      body\n    );\n\n    console.log(bla);\n  };\n\n  const responseFacebook = async (response) => {\n    // console.log(response);\n\n    const { accessToken } = response;\n\n    console.log(accessToken);\n\n    const body = {\n      accessToken,\n    };\n\n    const bla = await axios.post(\n      // \"https://warm-reef-14893.herokuapp.com/api/v1/auth/facebook\",\n      // \"http://localhost:4242/api/v1/auth/facebook\",\n      \"http://localhost:4242/auth/facebook\",\n      body\n    );\n\n    console.log(bla);\n  };\n\n  const handleGoogleAuth = async () => {\n    // await axios.get(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const params = new URLSearchParams({\n      client_id:\n        \"566572400240-1bqcgkac9k0v7j836crur44omj0htaoi.apps.googleusercontent.com\",\n      redirect_uri: \"https://warm-reef-14893.herokuapp.com/api/v1/auth/google\",\n      response_type: \"code\",\n      scope: \"openid email profile\",\n    });\n\n    const url =\n      \"https://accounts.google.com/o/oauth2/v2/auth?\" + params.toString();\n\n    // const test = window.open(url);\n\n    let style = `scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,\nwidth=600,height=300,left=100,top=100`;\n\n    // const bla = await axios.get(url);\n    // console.log(bla);\n\n    window.open(url, \"test\", style);\n\n    // const bla = await axios.get(\n    //   \"https://warm-reef-14893.herokuapp.com/api/v1/auth/google\",\n    //   params\n    // );\n    // console.log(bla);\n  };\n\n  const handleFacebookAuth = () => {\n    const params = new URLSearchParams({\n      client_id: \"641950426421786\",\n      redirect_uri:\n        \"https://warm-reef-14893.herokuapp.com/api/v1/auth/facebook\",\n      // state: \"{st=state123abc,ds=123456789}\",\n      scope: [\"email\", \"user_friends\"].join(\",\"),\n      response_type: \"code\",\n      auth_type: \"rerequest\",\n      display: \"popup\",\n    });\n\n    console.log(params.toString());\n\n    const url =\n      \"https://www.facebook.com/v8.0/dialog/oauth?\" + params.toString();\n\n    let style = `scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,\nwidth=600,height=300,left=100,top=100`;\n\n    const newWin = window.open(url, \"test\", style);\n\n    if (newWin.opener) {\n      // send them to the opening window\n      newWin.opener.postMessage(params);\n      // close the popup\n      newWin.close();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Hello github</h1>\n      {/* <form onSubmit={handleSubmit}>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"email\"\n            name=\"email\"\n            value={form.email}\n            onChange={handleInput}\n          />\n        </div>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"password\"\n            name=\"password\"\n            value={form.password}\n            onChange={handleInput}\n          />\n        </div>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"confirm password\"\n            name=\"confirmPassword\"\n            value={form.confirmPassword}\n            onChange={handleInput}\n          />\n        </div>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"name\"\n            name=\"name\"\n            value={form.name}\n            onChange={handleInput}\n          />\n        </div>\n        <button type=\"submit\">register</button>\n      </form>\n      <div>\n        <button onClick={handleGoogleAuth}>Google o_auth</button>\n      </div>\n      <div>\n        <button onClick={handleFacebookAuth}>Facebook o_auth</button>\n      </div>\n      <div>\n        <GoogleLogin\n          clientId=\"1016113227604-0u7tph6hm9s2bbnvi19h8dvdg3h5lqu4.apps.googleusercontent.com\"\n          buttonText=\"Login\"\n          onSuccess={responseGoogle}\n          onFailure={responseGoogle}\n          // cookiePolicy={\"single_host_origin\"}\n        />\n      </div>\n      <div>\n        <FacebookLogin\n          appId=\"628094021455729\"\n          fields=\"name,email,picture\"\n          // onClick={componentClicked}\n          callback={responseFacebook}\n          cssClass=\"Facebook-button\"\n        />\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}